load("C:/Users/ians1/OneDrive/Desktop/stat 469/ass 4/assignment4_data.rda")
head(assignment4_data)
load("C:/Users/ians1/OneDrive/Desktop/stat 469/ass 4/assignment4_data.rda")
View(bulk)
View(reference_matrix)
View(bulk)
knitr::opts_chunk$set(echo = TRUE)
# Load data
load("path_to_your_file.RData")
# Load data
load("assignment4_data.rda")
bulk_matrix <- bulk
# Log-transform
bulk_matrix_log <- log1p(bulk_matrix)
# Hierarchical clustering (patients)
patient_dist <- dist(t(bulk_matrix), method = "euclidean")
patient_hclust <- hclust(patient_dist, method = "complete")
# K-means clustering (genes, K=20)
set.seed(123)
kmeans_result <- kmeans(bulk_matrix, centers = 20, nstart = 100)
# Heatmap for original data
gene_order <- order(kmeans_result$cluster)
patient_order <- patient_hclust$order
image(t(bulk_matrix[gene_order, patient_order]),
col = heat.colors(100),
xlab = "Patients", ylab = "Genes",
main = "Heatmap (Original Data, K=20)")
cluster_boundaries <- cumsum(table(kmeans_result$cluster))
abline(h = cluster_boundaries / nrow(bulk_matrix), col = "black", lwd = 2)
# Heatmap for log-transformed data
gene_order_log <- order(kmeans_result$cluster)
image(t(bulk_matrix_log[gene_order_log, patient_order]),
col = heat.colors(100),
xlab = "Patients", ylab = "Genes",
main = "Heatmap (Log-Transformed Data, K=20)")
abline(h = cluster_boundaries / nrow(bulk_matrix_log), col = "black", lwd = 2)
# Dendrogram
plot(patient_hclust, main = "Patient Dendrogram", xlab = "", sub = "", cex = 0.9)
# Load data
load("assignment4_data.rda")
# Log transformation
bulk_log <- log1p(bulk)
# Patient clustering (columns = patients, rows = genes)
hc_original <- hclust(dist(t(bulk)), method = "complete")
hc_log <- hclust(dist(t(bulk_log)), method = "complete")
# K-means gene clustering
k_list <- c(20, 30, 40)
kmeans_results_original <- lapply(k_list, function(k) kmeans(bulk, centers = k, nstart = 100))
kmeans_results_log <- lapply(k_list, function(k) kmeans(bulk_log, centers = k, nstart = 100))
# Heatmap and Dendrogram Plot Function
plot_heatmap <- function(data_matrix, hc_patients, kmeans_genes, k_value, is_log) {
patient_order <- hc_patients$order
gene_order <- order(kmeans_genes$cluster)
reordered_matrix <- data_matrix[gene_order, patient_order]
# Layout: heatmap (bottom), dendrogram (top)
layout(matrix(1:2, ncol=1), heights=c(1, 4))
par(mar=c(0, 5, 2, 2))
# Patient dendrogram (top)
plot(as.dendrogram(hc_patients), horiz=FALSE, xaxt='n', main="", ylab="", xlab="", sub="")
# Heatmap (bottom)
par(mar=c(5, 5, 2, 2))
image(t(reordered_matrix), col=heat.colors(100), axes=FALSE,
main=paste0("Heatmap (K=", k_value, ", ", ifelse(is_log, "Log", "Original"), ")"))
axis(1, at=seq(0, 1, length.out=ncol(reordered_matrix)), labels=FALSE)
axis(2, at=seq(0, 1, length.out=nrow(reordered_matrix)), labels=FALSE)
# Add gene cluster boundaries
cluster_labels <- kmeans_genes$cluster[gene_order]
gene_boundaries <- which(diff(cluster_labels) != 0) / nrow(reordered_matrix)
abline(h = gene_boundaries, col = "black", lwd = 1.5)
}
# Loop over each K and each data version
for (i in seq_along(k_list)) {
k_val <- k_list[i]
# Plot for original
plot_heatmap(bulk, hc_original, kmeans_results_original[[i]], k_val, is_log = FALSE)
# Plot for log-transformed
plot_heatmap(bulk_log, hc_log, kmeans_results_log[[i]], k_val, is_log = TRUE)
}
knitr::opts_chunk$set(echo = TRUE)
# Load data
load("assignment4_data.rda")  # This should contain the 'bulk' matrix
# Log transformation
bulk_log <- log1p(bulk)
# Patient clustering
hc_original <- hclust(dist(t(bulk)), method = "complete")
hc_log <- hclust(dist(t(bulk_log)), method = "complete")
# K-means clustering (on genes)
k_list <- c(20, 30, 40)
kmeans_results_original <- lapply(k_list, function(k) kmeans(bulk, centers = k, nstart = 100))
kmeans_results_log <- lapply(k_list, function(k) kmeans(bulk_log, centers = k, nstart = 100))
knitr::opts_chunk$set(echo = TRUE)
load("assignment4_data.rda")
# Log transformation
bulk_log <- log1p(bulk)
# Patient clustering
hc_original <- hclust(dist(t(bulk)), method = "complete")
hc_log <- hclust(dist(t(bulk_log)), method = "complete")
# K-means clustering (on genes)
k_list <- c(20, 30, 40)
kmeans_results_original <- lapply(k_list, function(k) kmeans(bulk, centers = k, nstart = 100))
kmeans_results_log <- lapply(k_list, function(k) kmeans(bulk_log, centers = k, nstart = 100))
# Plotting function with patient dendrogram, heatmap, and labeled color scale
plot_heatmap <- function(data_matrix, hc_patients, kmeans_genes, k_value, is_log) {
patient_order <- hc_patients$order
gene_order <- order(kmeans_genes$cluster)
reordered_matrix <- data_matrix[gene_order, patient_order]
# Set layout: dendrogram (1), heatmap (2), color scale (3)
layout(matrix(c(1, 2, 3), ncol=1), heights=c(1, 5, 1))
# Dendrogram (top)
par(mar=c(0, 5, 2, 2))
plot(as.dendrogram(hc_patients), horiz=FALSE, xaxt='n', main="", ylab="", xlab="", sub="")
# Heatmap (middle)
par(mar=c(2, 5, 2, 2))
image(t(reordered_matrix), col=heat.colors(100), axes=FALSE,
main=paste0("Heatmap (K=", k_value, ", ", ifelse(is_log, "Log", "Original"), ")"))
axis(1, at=seq(0, 1, length.out=ncol(reordered_matrix)), labels=FALSE)
axis(2, at=seq(0, 1, length.out=nrow(reordered_matrix)), labels=FALSE)
# Add gene cluster boundaries
cluster_labels <- kmeans_genes$cluster[gene_order]
gene_boundaries <- which(diff(cluster_labels) != 0) / nrow(reordered_matrix)
abline(h = gene_boundaries, col = "black", lwd = 1.5)
# Color scale (bottom)
par(mar=c(3, 5, 1, 2))
image(1:100, 1, as.matrix(1:100), col=heat.colors(100), axes=FALSE, xlab="", ylab="")
axis(1, at=c(1, 50, 100), labels=c("Low", "Medium", "High"))
box()
}
# Generate all 6 heatmaps
for (i in seq_along(k_list)) {
k_val <- k_list[i]
# Original data
plot_heatmap(bulk, hc_original, kmeans_results_original[[i]], k_val, is_log = FALSE)
# Log-transformed data
plot_heatmap(bulk_log, hc_log, kmeans_results_log[[i]], k_val, is_log = TRUE)
}
knitr::opts_chunk$set(echo = TRUE)
load("assignment4_data.rda")
# Log transformation
bulk_log <- log1p(bulk)
# Patient clustering (columns = patients, rows = genes)
hc_original <- hclust(dist(t(bulk)), method = "complete")
hc_log <- hclust(dist(t(bulk_log)), method = "complete")
# K-means gene clustering
k_list <- c(20, 30, 40)
kmeans_results_original <- lapply(k_list, function(k) kmeans(bulk, centers = k, nstart = 100))
kmeans_results_log <- lapply(k_list, function(k) kmeans(bulk_log, centers = k, nstart = 100))
# Heatmap and Dendrogram Plot Function
plot_heatmap <- function(data_matrix, hc_patients, kmeans_genes, k_value, is_log) {
patient_order <- hc_patients$order
gene_order <- order(kmeans_genes$cluster)
reordered_matrix <- data_matrix[gene_order, patient_order]
# Layout: heatmap (bottom), dendrogram (top)
layout(matrix(1:2, ncol=1), heights=c(1, 4))
par(mar=c(0, 5, 2, 2))
# Patient dendrogram (top)
plot(as.dendrogram(hc_patients), horiz=FALSE, xaxt='n', main="", ylab="", xlab="", sub="")
# Heatmap (bottom)
par(mar=c(5, 5, 2, 2))
image(t(reordered_matrix), col=heat.colors(100), axes=FALSE,
main=paste0("Heatmap (K=", k_value, ", ", ifelse(is_log, "Log", "Original"), ")"))
axis(1, at=seq(0, 1, length.out=ncol(reordered_matrix)), labels=FALSE)
axis(2, at=seq(0, 1, length.out=nrow(reordered_matrix)), labels=FALSE)
# Add gene cluster boundaries
cluster_labels <- kmeans_genes$cluster[gene_order]
gene_boundaries <- which(diff(cluster_labels) != 0) / nrow(reordered_matrix)
abline(h = gene_boundaries, col = "black", lwd = 1.5)
}
# Loop over each K and each data version
for (i in seq_along(k_list)) {
k_val <- k_list[i]
# Plot for original
plot_heatmap(bulk, hc_original, kmeans_results_original[[i]], k_val, is_log = FALSE)
# Plot for log-transformed
plot_heatmap(bulk_log, hc_log, kmeans_results_log[[i]], k_val, is_log = TRUE)
}
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
install.packages("Matrix", dependencies = TRUE, type = "source")
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
install.packages("seuratObject")
install.packages("SeuratObject")
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
packageVersion("Matrix")
remove.packages("Matrix")
remove.packages("Matrix")
install.packages("Matrix")
find.package("Matrix")
find.package("Matrix")
remove.packages("Matrix")
install.packages("Matrix", dependencies = TRUE, type = "source")
r_version
