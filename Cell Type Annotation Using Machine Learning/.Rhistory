test <- readRDS("C:/Users/ians1/OneDrive/Desktop/stat 469/final project/test.rds")
train <- readRDS("C:/Users/ians1/OneDrive/Desktop/stat 469/final project/train.rds")
knitr::opts_chunk$set(echo = TRUE)
head(train)
orint(head(train))
print(head(train))
print(head(test))
# Example code snippet from main training script
library(caret)
library(ranger)
install.packages("ranger")
# Example code snippet from main training script
library(caret)
library(ranger)
# Load and preprocess data
train_data <- readRDS("training_data.rds")
# Example code snippet from main training script
library(caret)
library(ranger)
# Load and preprocess data
train_data <- readRDS("training_data.rds")
# Example code snippet from main training script
library(caret)
library(ranger)
# Load and preprocess data
train_data <- readRDS("training_data.rds")
# Example code snippet from main training script
library(caret)
library(ranger)
# Load and preprocess data
train_data <- readRDS("training_data.rds")
knitr::opts_chunk$set(echo = TRUE)
# Example code snippet from main training script
library(caret)
library(ranger)
# Load and preprocess data
train_data <- readRDS("training_data.rds")
head(train.rds)
train <- readRDS("C:/Users/ians1/OneDrive/Desktop/stat 469/final project/train.rds")
head(train)
print(train)
test <- readRDS("C:/Users/ians1/OneDrive/Desktop/stat 469/final project/test.rds")
head(test)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
install.packages("Seurat")
install.packages("Seurat")
train <- readRDS("C:/Users/ians1/OneDrive/Desktop/stat 469/final project/train.rds")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
install.packages(Seurat)
install.packages("Seurat")
install.packages("Seurat")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
install.packages("Seurat")
install.packages("Seurat")
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
install.packages("Seurat")
library(SeuratObject)
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
detach("package:SeuratObject", unload = TRUE)
library(SeuratObject)
install.packages("SeuratObject")
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
install.packages("SeuratObject")
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
library("caret")
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
install.packages("SeuratObject")
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
install.packages("Matrix")
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
packageVersion("Matrix")
install.packages("Matrix", dependencies = TRUE, type = "source")
packageVersion("Matrix")
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)    # Data manipulation
library(Seurat)       # Single-cell analysis (normalization, PCA)
install.packages("Matrix", type = "source", dependencies = TRUE)
packageVersion("Matrix")  # Should be >= 1.6.4
library(Seurat)
library(tidyverse)    # Data manipulation
library(caret)        # Machine learning (RF, SVM, etc.)
library(xgboost)      # Gradient boosting (optional)
library(Matrix)       # Handling sparse data
# Read training data (with labels)
train_data <- read.csv("train_data.csv", row.names = 1)  # Assuming row=cell, col=genes + metadata
test <- readRDS("C:/Users/ians1/OneDrive/Desktop/stat 469/final project/test.rds")
train <- readRDS("C:/Users/ians1/OneDrive/Desktop/stat 469/final project/train.rds")
train <- readRDS("C:/Users/ians1/OneDrive/Desktop/stat 469/final project/train.rds")
# Read training data (with labels)
train_data <- train
cell_types <- train_data$CellType  # Extract labels
train_data <- train_data[, -which(colnames(train_data) %in% c("SampleID", "CellType"))]  # Remove metadata
# Read test data (no labels)
test_data <- test
# Convert to sparse matrix (if needed)
train_matrix <- Matrix(as.matrix(train_data), sparse = TRUE)
# Log-normalize (Seurat-style)
normalize_data <- function(mat) {
mat <- log1p(mat / rowSums(mat) * 1e4)  # Log(CP10K)
return(mat)
}
train_norm <- normalize_data(train_matrix)
# Select Highly Variable Genes (HVGs) - adjust nfeatures as needed
hvg <- FindVariableFeatures(t(train_norm), nfeatures = 2000)
library(tidyverse)    # Data manipulation
library(caret)        # Machine learning (RF, SVM, etc.)
library(xgboost)      # Gradient boosting (optional)
library(Matrix)       # Handling sparse data
library(Seurat)       # Single-cell analysis (normalization, PCA)
install.packages('SeuratObject')
library(tidyverse)    # Data manipulation
library(caret)        # Machine learning (RF, SVM, etc.)
library(xgboost)      # Gradient boosting (optional)
library(Matrix)       # Handling sparse data
library(Seurat)       # Single-cell analysis (normalization, PCA)
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)    # Data manipulation
library(caret)        # Machine learning (RF, SVM, etc.)
library(xgboost)      # Gradient boosting (optional)
library(Matrix)       # Handling sparse data
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(caret)        # Machine learning (RF, SVM, etc.)
library(xgboost)      # Gradient boosting (optional)
library(Matrix)       # Handling sparse data
library(Seurat)       # Single-cell analysis (normalization, PCA)
library(tidyverse)    # Data manipulation
library(caret)        # Machine learning (RF, SVM, etc.)
library(xgboost)      # Gradient boosting (optional)
library(Matrix)       # Handling sparse data
# Read training data (with labels)
train_data <- train
cell_types <- train_data$CellType  # Extract labels
train_data <- train_data[, -which(colnames(train_data) %in% c("SampleID", "CellType"))]  # Remove metadata
# Read test data (no labels)
test_data <- test
# Convert to sparse matrix (if needed)
train_matrix <- Matrix(as.matrix(train_data), sparse = TRUE)
# Log-normalize (Seurat-style)
normalize_data <- function(mat) {
mat <- log1p(mat / rowSums(mat) * 1e4)  # Log(CP10K)
return(mat)
}
train_norm <- normalize_data(train_matrix)
# Select Highly Variable Genes (HVGs) - adjust nfeatures as needed
hvg <- FindVariableFeatures(t(train_norm), nfeatures = 2000)
# Read training data (with labels)
train_data <- train
cell_types <- train_data$CellType  # Extract labels
train_data <- train_data[, -which(colnames(train_data) %in% c("SampleID", "CellType"))]  # Remove metadata
# Read test data (no labels)
test_data <- test
# Convert to sparse matrix (if needed)
train_matrix <- Matrix(as.matrix(train_data), sparse = TRUE)
# Log-normalize (Seurat-style)
normalize_data <- function(mat) {
mat <- log1p(mat / rowSums(mat) * 1e4)  # Log(CP10K)
return(mat)
}
train_norm <- normalize_data(train_matrix)
# Select Highly Variable Genes (HVGs) - adjust nfeatures as needed
# Calculate gene variances
gene_vars <- apply(train_norm, 2, var)
hvg <- names(sort(gene_vars, decreasing = TRUE))[1:2000]
train_hvg <- train_norm[, hvg]
# PCA
pca <- prcomp(train_hvg, scale. = TRUE)
train_pca <- pca$x[, 1:50]  # Top 50 PCs
# UMAP (for visualization)
library(umap)
install.packages('SeuratO')
install("umap")
install.packages("umap")
# Read training data (with labels)
train_data <- train
cell_types <- train_data$CellType  # Extract labels
train_data <- train_data[, -which(colnames(train_data) %in% c("SampleID", "CellType"))]  # Remove metadata
# Read test data (no labels)
test_data <- test
# Convert to sparse matrix (if needed)
train_matrix <- Matrix(as.matrix(train_data), sparse = TRUE)
# Log-normalize (Seurat-style)
normalize_data <- function(mat) {
mat <- log1p(mat / rowSums(mat) * 1e4)  # Log(CP10K)
return(mat)
}
train_norm <- normalize_data(train_matrix)
# Select Highly Variable Genes (HVGs) - adjust nfeatures as needed
# Calculate gene variances
gene_vars <- apply(train_norm, 2, var)
hvg <- names(sort(gene_vars, decreasing = TRUE))[1:2000]
train_hvg <- train_norm[, hvg]
# PCA
pca <- prcomp(train_hvg, scale. = TRUE)
train_pca <- pca$x[, 1:50]  # Top 50 PCs
# UMAP (for visualization)
library(umap)
umap_out <- umap(train_pca)
